{
  "Comment": "State Machine for job",
  "StartAt": "InsertInitialJobStatsForInstance",
  "States": {
    "InsertInitialJobStatsForInstance": {
      "Type": "Task",
      "TimeoutSeconds": 15,
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "JobStats",
        "Item": {
          "JobId": {
            "S.$": "$$.Execution.Id"
          },
          "JobStatus": {
            "S": "STARTED"
          },
          "StartTime": {
            "S.$": "$$.Execution.StartTime"
          },
          "EndTime": {
            "S": ""
          },
          "TotalDocsProcessed": {
            "N": "0"
          },
          "TotalDocsQueried": {
            "N": "0"
          },
          "IterationCount": {
            "N": "1"
          }
        }
      },
      "ResultPath": null,
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 5,
          "BackoffRate": 2
        }
      ],
      "Next": "VerifyInput"
    },
    "VerifyInput": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.max_parallel_executions",
              "IsPresent": true
            },
            {
              "Variable": "$.max_parallel_executions",
              "IsNumeric": true
            },
            {
              "Variable": "$.query_batch_size",
              "IsPresent": true
            },
            {
              "Variable": "$.query_batch_size",
              "IsNumeric": true
            },
            {
              "Variable": "$.business_date",
              "IsPresent": true
            },
            {
              "Variable": "$.business_date",
              "IsString": true
            },
            {
              "Variable": "$.namespaces",
              "IsPresent": true
            },
            {
              "Variable": "$.query_percentage_success",
              "IsPresent": true
            },
            {
              "Variable": "$.query_percentage_success",
              "IsNumeric": true
            },
            {
              "Variable": "$.docs_transformation_percentage_success",
              "IsPresent": true
            },
            {
              "Variable": "$.docs_transformation_percentage_success",
              "IsNumeric": true
            }
          ],
          "Next": "QueryEligibleNamespaces"
        }
      ],
      "Default": "UpdateJobStatusFailureInJobStats"
    },
    "UpdateIterationCountInJobStats": {
      "Type": "Task",
      "TimeoutSeconds": 15,
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "JobStats",
        "Key": {
          "JobId": {
            "S.$": "$$.Execution.Id"
          }
        },
        "UpdateExpression": "SET IterationCount = IterationCount + :num",
        "ExpressionAttributeValues": {
          ":num": {
            "N": "1"
          }
        }
      },
      "ResultPath": null,
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 5,
          "BackoffRate": 2
        }
      ],
      "Next": "QueryEligibleNamespaces"
    },
    "QueryEligibleNamespaces": {
      "Type": "Map",
      "ItemsPath": "$.namespaces",
      "Parameters": {
        "namespace.$": "$$.Map.Item.Value",
        "max_parallel_executions.$": "$.max_parallel_executions",
        "query_batch_size.$": "$.query_batch_size",
        "business_date.$": "$.business_date",
        "execution_id.$": "$$.Execution.Id"
      },
      "ResultPath": "$.namespaces",
      "Iterator": {
        "StartAt": "GetTotalDocsInNamespaceAndCreateBatchesForLexQuery",
        "States": {
          "GetTotalDocsInNamespaceAndCreateBatchesForLexQuery": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName": "arn:aws:lambda:us-east-1:112757862110:function:A3BuildQueryBatches"
            },
            "OutputPath": "$.Payload",
            "TimeoutSeconds": 300,
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 2,
                "BackoffRate": 2
              }
            ],
            "Next": "QueryNamespaceInParallel"
          },
          "QueryNamespaceInParallel": {
            "Type": "Map",
            "ItemsPath": "$.namespace.batch_index",
            "Parameters": {
              "total_docs.$": "$.namespace.total_docs",
              "max_parallel_query_executions.$": "$.max_parallel_query_executions",
              "batch_index.$": "$$.Map.Item.Value",
              "query_batch_size.$": "$.query_batch_size",
              "business_date.$": "$.business_date"
            },
            "ResultPath": "$.total_queried_data_per_batch",
            "Next": "CalculateAndUpdateQueriedDocsInNamespace",
            "Iterator": {
              "StartAt": "QueryNamespace",
              "States": {
                "QueryNamespace": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "arn:aws:lambda:us-east-1:112757862110:function:QueryNamespace"
                  },
                  "ResultSelector": {
                    "total_docs_queried.$": "$.Payload.total_docs_queried",
                    "query_from_index.$": "$.Payload.query_from_index"
                  },
                  "ResultPath": "$.namespace_query_summary",
                  "TimeoutSeconds": 300,
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 5,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "ShouldContinueQueryingNamespace"
                },
                "ShouldContinueQueryingNamespace": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Comment": "Check if we need to continue querying namespace if we haven't reached the total docs",
                      "Variable": "$.namespace_query_summary.query_from_index",
                      "NumericLessThanPath": "$.total_docs",
                      "Next": "QueryNamespace"
                    }
                  ],
                  "Default": "FilterTotalQueriedDocsPerBatch"
                },
                "FilterTotalQueriedDocsPerBatch": {
                  "Type": "Pass",
                  "OutputPath": "$.namespace_query_summary.total_docs_queried",
                  "End": true
                }
              }
            }
          },
          "CalculateAndUpdateQueriedDocsInNamespace": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName": "arn:aws:lambda:us-east-1:112757862110:function:CalculateTotalQueriedDocsInNamespace"
            },
            "OutputPath": "$.Payload",
            "TimeoutSeconds": 300,
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 5,
                "BackoffRate": 2
              }
            ],
            "End": true
          }
        }
      },
      "Next": "ValidateNamespacesQueryingProcess"
    },
    "ValidateNamespacesQueryingProcess": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-east-1:112757862110:function:CalculateTotalQueriedDocsInAllNamespaces"
      },
      "OutputPath": "$.Payload",
      "TimeoutSeconds": 300,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 5,
          "BackoffRate": 2
        }
      ],
      "Next": "ShouldRetryNamespaceQueries"
    },
    "ShouldRetryNamespaceQueries": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.should_retry_job",
          "BooleanEquals": true,
          "Next": "UpdateIterationCountInJobStats",
          "Comment": "Retry Job"
        },
        {
          "Variable": "$.should_fail_job",
          "BooleanEquals": true,
          "Next": "UpdateJobStatusFailureInJobStats"
        }
      ],
      "Default": "UpdateTotalDocsQueriedInJobStats"
    },
    "UpdateTotalDocsQueriedInJobStats": {
      "Type": "Task",
      "TimeoutSeconds": 15,
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "JobStats",
        "Key": {
          "JobId": {
            "S.$": "$$.Execution.Id"
          }
        },
        "UpdateExpression": "SET TotalDocsQueried = :val1",
        "ExpressionAttributeValues": {
          ":val1": {
            "N.$": "States.Format('{}', $.total_queried_docs_in_all_namespaces)"
          }
        }
      },
      "ResultPath": null,
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 5,
          "BackoffRate": 2
        }
      ],
      "Next": "CreateBatchesForDeltaDocs"
    },
    "CreateBatchesForDeltaDocs": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "ResultSelector": {
        "batch_index.$": "$.Payload.batch_index"
      },
      "ResultPath": "$.delta_docs_batches_distribution",
      "Parameters": {
        "Payload": {
          "business_date.$": "$.business_date",
          "max_parallel_executions.$": "$.max_parallel_executions",
          "execution_name.$": "$$.Execution.Name",
          "s3_bucket_name": "jobdailybatchprocessing"
        },
        "FunctionName": "arn:aws:lambda:us-east-1:112757862110:function:GetDeltaDocsAndCreateBatches"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 5,
          "BackoffRate": 2
        }
      ],
      "Next": "DeltaDocsDataTransformation"
    },
    "DeltaDocsDataTransformation": {
      "Type": "Map",
      "ItemsPath": "$.delta_docs_batches_distribution.batch_index",
      "ResultPath": null,
      "Parameters": {
        "batch_id.$": "$$.Map.Item.Value",
        "execution_name.$": "$$.Execution.Name",
        "max_parallel_executions.$": "$.max_parallel_executions",
        "business_date.$": "$.business_date"
      },
      "Iterator": {
        "StartAt": "GetDeltaDocsBatchInfo",
        "States": {
          "GetDeltaDocsBatchInfo": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "arn:aws:lambda:us-east-1:112757862110:function:GetDeltaDocBatchesInfo",
              "Payload": {
                "batch_id.$": "$.batch_id",
                "execution_name.$": "$$.Execution.Name",
                "max_parallel_executions.$": "$.max_parallel_executions",
                "business_date.$": "$.business_date",
                "s3_bucket_name": "jobdailybatchprocessing"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 5,
                "BackoffRate": 2
              }
            ],
            "ResultSelector": {
              "batch_number.$": "$.Payload.batch_number",
              "delta_docs_to_run.$": "$.Payload.delta_docs_to_run"
            },
            "ResultPath": "$.delta_docs_batch_info",
            "Next": "RunDocTransformationInDistributorSFN"
          },
          "RunDocTransformationInDistributorSFN": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync:2",
            "Parameters": {
              "StateMachineArn": "arn:aws:states:us-east-1:112757862110:stateMachine:A3JobDistributorSFN",
              "Name.$": "States.Format('{}_batch_{}', $$.Execution.Name, $.delta_docs_batch_info.batch_number)",
              "Input": {
                "max_parallel_executions.$": "$.max_parallel_executions",
                "business_date.$": "$.business_date",
                "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                "execution_id.$": "$$.Execution.Id",
                "delta_docs_to_run.$": "$.delta_docs_batch_info.delta_docs_to_run"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "StepFunctions.ExecutionAlreadyExistsException"
                ],
                "IntervalSeconds": 1,
                "BackoffRate": 5,
                "MaxAttempts": 1
              },
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "IntervalSeconds": 1,
                "BackoffRate": 2,
                "MaxAttempts": 5
              }
            ],
            "End": true
          }
        }
      },
      "Next": "CalculateTotalTransformedDocs"
    },
    "CalculateTotalTransformedDocs": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-east-1:112757862110:function:CalculateTotalTransformedDocs"
      },
      "ResultPath": null,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 5,
          "BackoffRate": 2
        }
      ],
      "Next": "UpdateAgreementHashes"
    },
    "UpdateAgreementHashes": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-east-1:112757862110:function:UpdateAgreementHashes"
      },
      "ResultPath": null,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 5,
          "BackoffRate": 2
        }
      ],
      "Next": "CreateJobDailyA3Data"
    },
    "CreateJobDailyA3Data": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:us-east-1:112757862110:function:CreateJobDailyA3Data",
        "Payload": {
          "business_date.$": "$.business_date"
        }
      },
      "ResultSelector": {
        "total_documents_processed.$": "$.Payload.total_documents_processed"
      },
      "ResultPath": "$.delta_docs_processed_info",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 5,
          "BackoffRate": 2
        }
      ],
      "Next": "CleanupDailyJob"
    },
    "CleanupDailyJob": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "business_date.$": "$.business_date"
        },
        "FunctionName": "arn:aws:lambda:us-east-1:112757862110:function:CleanupDailyJob"
      },
      "ResultPath": null,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 5,
          "BackoffRate": 2
        }
      ],
      "Next": "UpdateJobTerminationFieldsInJobStats"
    },
    "UpdateJobTerminationFieldsInJobStats": {
      "Type": "Task",
      "TimeoutSeconds": 15,
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "JobStats",
        "Key": {
          "JobId": {
            "S.$": "$$.Execution.Id"
          }
        },
        "UpdateExpression": "SET TotalDocsProcessed = :val1, EndTime = :val2, JobStatus = :val3",
        "ExpressionAttributeValues": {
          ":val1": {
            "N.$": "States.Format('{}', $.delta_docs_processed_info.total_documents_processed)"
          },
          ":val2": {
            "S.$": "States.Format('{}', $$.State.EnteredTime)"
          },
          ":val3": {
            "S": "COMPLETED"
          }
        }
      },
      "ResultPath": null,
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 5,
          "BackoffRate": 2
        }
      ],
      "End": true
    },
    "UpdateJobStatusFailureInJobStats": {
      "Type": "Task",
      "TimeoutSeconds": 15,
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "JobStats",
        "Key": {
          "JobId": {
            "S.$": "$$.Execution.Id"
          }
        },
        "UpdateExpression": "SET JobStatus = :val1, EndTime = :val2",
        "ExpressionAttributeValues": {
          ":val1": {
            "S": "FAILED"
          },
          ":val2": {
            "S.$": "States.Format('{}', $$.State.EnteredTime)"
          }
        }
      },
      "ResultPath": null,
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "MaxAttempts": 5,
          "BackoffRate": 2
        }
      ],
      "Next": "JobFail"
    },
    "JobFail": {
      "Type": "Fail",
      "Cause": "Unsatisfactory job data",
      "Error": "A3 Job Failure",
      "Comment": "placeholder - job fails and send notification to manager"
    }
  }
}